df=pd.read_csv('1.01. Simple linear regression.csv')
print(df.isnull())
# Fill null values with a specific value, e.g., 0
df_filled = df.fillna(0)
print(df.isnull())
x=df['SAT']
y=df['GPA']
import matplotlib.pyplot as plt
plt.title('Score')
plt.xlabel('SAT')
plt.ylabel('GPA')
plt.scatter(x,y)
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.25)
x_train=x_train.values
x_train=x_train.reshape(63,1)
x_test=x_test.values
x_test=x_test.reshape(21,1)
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.fit_transform(x_test)
from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(x_train,y_train)
predicted=regressor.predict(x_test)
#mbe
np.mean(abs(y_test-predicted))
#msse
mse=np.mean(abs(y_test-predicted)**2)
#rse
np.sum(abs(y_test-predicted)**2)
n = len(y_test)

rss = mse * n
print(rss)
regressor.score(x_test,y_test)
import matplotlib.pyplot as plt
plt.title('Score')
plt.xlabel('SAT')
plt.ylabel('GPA')
plt.scatter(x_test,y_test,label='actual',color='g')
plt.plot(x_test,predicted,label='predicted',color='r')

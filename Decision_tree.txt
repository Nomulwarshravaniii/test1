import pandas as pd
import seaborn as sns
data=pd.read_csv('madfhantr.csv')
from sklearn.preprocessing import StandardScaler, LabelEncoder
le = LabelEncoder()
data['Gender'] = le.fit_transform(data['Gender'])  # Target variable encoding
data['Married'] = le.fit_transform(data['Married'])
data['Education'] = le.fit_transform(data['Education'])
data['Self_Employed'] = le.fit_transform(data['Self_Employed'])
data['Property_Area'] = le.fit_transform(data['Property_Area'])
data['Loan_Status'] = le.fit_transform(data['Loan_Status'])
# Convert all values in Dependents to strings to handle mixed data types
data['Dependents'] = data['Dependents'].astype(str) #cant convert directly to int

# Now apply Label Encoding
data['Dependents'] = le.fit_transform(data['Dependents'])
print(data.isnull())
#data=data.fillna(0)
data.dropna(inplace=True)
#x = data.drop(['Loan_Status','Loan_ID'], axis=1)  # Features
x = data.drop(columns=['Loan_Status','Loan_ID','Property_Area'])
y = data['Loan_Status']
sns.countplot(x=y)
y.value_counts()
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.25)
from sklearn.tree import DecisionTreeClassifier
classifier=DecisionTreeClassifier(random_state=0)
print(data['Dependents'].unique()) 
print(data.dtypes)
#decision tree is created
classifier.fit(x_train,y_train)
y_pred=classifier.predict(x_test)
result =pd.DataFrame({
    'actual':y_test,
    'predicted':y_pred
})
classifier.predict([[1,1,0,0,0,2130,6666.0,70.0,180.0,1.0]])
from sklearn.metrics import ConfusionMatrixDisplay,accuracy_score
from sklearn.metrics import classification_report
ConfusionMatrixDisplay.from_predictions(y_test,y_pred)
print(classification_report(y_test,y_pred))
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt
plt.figure(figsize=(20,20))
plot_tree(classifier,fontsize=8,filled=True,rounded=True,
         feature_names=x.columns,class_names=['NO','YES'])
plt.show()
